#!/bin/bash
# Get the directory of this script, works in both bash and zsh
if [ -n "${BASH_SOURCE[0]}" ]; then
    ARSH_RC_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
else
    ARSH_RC_DIR="$( cd "$( dirname "${(%):-%N}" )" >/dev/null 2>&1 && pwd )"
fi

# for when zsh gets unruly: https://askubuntu.com/questions/441744/pressing-enter-produces-m-instead-of-a-newline
# also this: https://www.reddit.com/r/zsh/comments/2rfcba/sometimes_the_enter_key_prints_m_instead_of_doing/
stty sane

# Start SSH agent if not already running
if [ -z "$SSH_AUTH_SOCK" ]; then
  eval "$(ssh-agent -s)" > /dev/null
fi

source "$ARSH_RC_DIR/utilities.sh"
source "$ARSH_RC_DIR/docker_utils.sh"
source "$ARSH_RC_DIR/git_utils.sh"
source "$ARSH_RC_DIR/sync_utils.sh"
source "$ARSH_RC_DIR/prompt_utils.sh"
source "$ARSH_RC_DIR/gcloud_utils.sh"
source "$ARSH_RC_DIR/kubernetes_utils.sh"

# MacOS only
[ -f /opt/homebrew/bin/brew ] && eval "`/opt/homebrew/bin/brew shellenv`"

# zoxide stuff
if command -v zoxide > /dev/null; then
  case "$0" in
    *zsh)
      shell=zsh
      ;;
    *bash*)
      shell=bash
      ;;
    *)
      shell=`basename $SHELL`
      ;;
  esac
  # eval "`zoxide init $shell`"
  eval "`zoxide init bash`"
fi

export PATH=$PATH:~/.local/bin
export PATH=~/.arshan/bin:$PATH
export PATH=$PATH:/usr/bin

# gcloud stuff
[ -d /home/paperspace/google-cloud-sdk/bin ] && export PATH=$PATH:$HOME/google-cloud-sdk/bin

# MacOS specific commands
if [ `uname -s` = "Darwin" ]; then
  alias make="gmake"
  alias sed="gsed"
  alias bazel710=/opt/homebrew/Cellar/bazel/7.1.2/libexec/bin/bazel-7.1.0-darwin-arm64
  alias cat="bat"
fi

alias sl="echo ðŸš‚"

# Linux specific commands
if [ `uname -s` = "Linux" ]; then
  alias kurtosis='sudo kurtosis'
fi

function setupPermissions() {
  sudo usermod -aG docker `whoami`
}

# for all rust programs
[ -f $HOME/.cargo/env ] && source $HOME/.cargo/env

# import rye if it exists
if [ -d "$HOME/.rye" ]; then
  source "$HOME/.rye/env";
fi

function loadnvm() {
  # nvm stuff (imports if exists)
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  
  echo "âœ… loaded nvm"
}

# suv = start uv
function suv() {
  command -v conda && conda deactivate
  source .venv/bin/activate
}

# snuv = "start new uv"
function snuv() {
  version=${1:-"3.11"}
  uv venv -p $version
  command -v conda && conda deactivate
  source .venv/bin/activate
}

# upip = "uv pip"
alias upip="uv pip"

function select_machine() {
  if [ -z "$1" ]; then
    machine=`cat $MACHINE_FILEPATH | fzf`
  else
    machine=`cat $MACHINE_FILEPATH | grep $1 | head -n 1`
  fi
  if [ -z "$machine" ]; then return 1; fi;
  machine_name=`echo $machine | awk '{print $1}'`
  keyfile=`echo $machine | awk '{print $2}'`
  hostname=`echo $machine | awk '{print $3}'`
  additional_flags=`echo $machine | awk -F '"' '{print $2}'`
  keypath="$keyfile"
}

function sshh() {
  if ! eval "select_machine"; then echo "command was not successful"; return; fi
  persistence_flags="-o ServerAliveInterval=15 -o ServerAliveCountMax=3 -o ConnectTimeout=15 -o ConnectionAttempts=30 -o TCPKeepAlive=yes -o StrictHostKeyChecking=accept-new"
  cmd="ssh -i $keyfile $persistence_flags $hostname $additional_flags"
  echo $cmd
  eval $cmd
}

function scpull() {
  if ! eval "select_machine"; then echo "command was not successful"; return; fi
  rsync -avz -e "ssh -i $keypath" $hostname:$1 $2
}

function scpush() {
  if ! eval "select_machine"; then echo "command was not successful"; return; fi
  rsync -avz -e "ssh -i $keypath" $1 $hostname:$2
}

# for some stupid fuckin reason nillion puts their shit in ~/.zshenv
# check if file exists and if so, source it
[ -f ~/.zshenv ] && source ~/.zshenv

default_rpc="http://127.0.0.1:8545"

function ethArgs() {
  rpc=$default_rpc
  method_name="eth_blockNumber"
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --rpc)
        rpc=$2
        shift 2
        ;;
      --method)
        method_name=$2
        shift 2
        ;;
      --params)
        params=$2
        shift 2
        ;;
    esac
  done
}

function ethrpc() {
  ethArgs "$@"
  data="{\"jsonrpc\":\"2.0\",\"method\":\"$method_name\",\"params\":[$params],\"id\":1}"
  curl -sX POST -H "Content-Type: application/json" --data "$data" $rpc | jq ".result"
}

# from here: https://geth.ethereum.org/docs/interacting-with-geth/rpc/ns-admin
function gethpeers() {
  rpc=$1
  if [ -z $rpc ]; then rpc=$default_rpc; fi
  ethrpc --method admin_peers --rpc $rpc
}

function curlbn() {
  curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' $1
}
